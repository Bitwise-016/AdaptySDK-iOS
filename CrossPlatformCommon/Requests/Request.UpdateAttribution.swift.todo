//
//  Request.UpdateAttribution.swift
//  AdaptyPlugin
//
//  Created by Aleksei Valiano on 08.11.2024.
//

import Adapty
import Foundation

extension Request {
    struct UpdateAttribution: AdaptyPluginRequest {
        static let method = Method.updateAttribution

        let attribution: [String: any Sendable]
        let source: AdaptyAttributionSource
        let networkUserId: String?

        init(from jsonDictionary: AdaptyJsonDictionary) throws {
            try self.init(
                attribution: jsonDictionary.value(forKey: CodingKeys.attribution),
                source: jsonDictionary.value(forKey: CodingKeys.source),
                networkUserId: jsonDictionary.valueIfPresent(String.self, forKey: CodingKeys.networkUserId)
            )
        }

        init(attribution: KeyValue, source: KeyValue, networkUserId: String?) throws {
            self.attribution = try attribution.decode([String: any Sendable].self)
            self.source = try source.decode(AdaptyAttributionSource.self)
            self.networkUserId = networkUserId
        }

        func execute() async throws -> AdaptyJsonData {
            try await Adapty.updateAttribution(attribution, source: source, networkUserId: networkUserId)
            return .success()
        }
    }
}

private enum CodingKeys: String, CodingKey {
    case attribution
    case source
    case networkUserId = "network_user_id"
}

public extension AdaptyPlugin {
    @objc static func updateAttribution(
        attribution: String,
        source: String,
        networkUserId: String?,
        _ completion: @escaping AdaptyJsonDataCompletion
    ) {
        withCompletion(completion) {
            await Request.UpdateAttribution.execute {
                try Request.UpdateAttribution(
                    attribution: .init(key: CodingKeys.attribution, value: attribution),
                    source: .init(key: CodingKeys.source, value: source),
                    networkUserId: networkUserId
                )
            }
        }
    }
}
